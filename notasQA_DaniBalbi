# Resultado de una prueba
## Informes de resultado de un TestCase
Como informar el resultado de un caso de prueba?
Hay una planilla exel en drive proyecto testing us
## Error-Defecto-Falla
* Error:
Se refiere a la diferencia entre la salida actual de un software y la correcta. Tambien puede ser una accion que introduce en el software en defecto o falla.

* Defecto:
Es una condicion que causa que un software falle al realizar una funcion requerida (USADO COMO SINONIMO DE BUG).

* Falla:
Es la incapacidad de un software para realizar una funcion requerida de acuerdo con sus especificaciones (son producidas por defectos).

## Entrevista a un QA
1. Cuales son los pricipales retos de las pruebas de software?
* Poder asegurar lo mas temprano posible la calidad de lo que uno esta entregando
2. Que buenas practicas de testing considera que deben adoptar las organizaciones?
* La mejor practica del testing es abordar el testing desde los requerimientos (desde el comienzo)
3. Que recomendaciones puede dar sobre el dise침o de pruebas?
* Tratar de hacer casos de pruebas lo mas objetivos, lo mas peque침os y los mas autocontenidos posibles. Que permitan a cualquier persona tanto analistas funcionales, testers ejecutores o como usuarios finales permitir comprender que se esta probando exactamente. Un caso de pruebas no debe de tener mas de tres puntos de verificacion, no mas. Siempre debe tener un resultado esperado
4. Que retos se pueden resolver a travez de herramientas o automatizacion de pruebas?
* Hay tres tipos de herramientas que se utilizan en la industria. Una es la que tiene que ver con la gestion de las pruebas, donde uno desarrolla los casos de pruebas y reporta los defectos. El segundo grupo de herramientas son las de automatizacion de pruebas o robots que ayuda a hacer regresiones automaticas y deben utilizarse cuando hago regresiones constantes de un software osea cuando un software entra en mantenimiento. Se dice que un script de prueba paga su costo si y solo si se ejecuta ese script a lo largo de su vida 12 veces, sino no conviene hacer una regresion automatica.
Por otro lado existen un tercer grupo de herramientas que se denominan herraminetas de stress test que sirven para medir la performance de algunas transacciones del software para hacer pruebas de volumen y stress (requrimientos no funcionales del software)
5. Ademas  del conocimento tecnico para la ejecucion de pruebas, que otros conocimientos son necesarios para armar un area de pruebas?
* El area de pruebas deberia tener estos conocimientos importantes:
    1. Gestion y metodologia de pruebas
    2. Skill funcionales que conozcan del negocio y que a lo largo del tiempo aprendan tanto de la aplicacion como su analista funcional. Skills de automatizacion y de stress test
6. Pueden las pruebas garantizar el cumplimento de los objetivos de negocio? Como?
* reveer ver Alcenit corporation
7. Cual es el perfil de una persona encargada del area de testing?
* Fuerte perfil de gestion, analista de QA
## Clase 4 Base de datos y revision en testing manual
### Ver video
## Clasificacion de pruebas de testing de software
1. Funcionales:
Se realiza la validacion de las funciones del sistema, basandose en el requerimiento de las acciones a realizar.
Las pruebas funcionales se centran en losrequisitos empresariales de una aplicacion. Solo verifican el resultado de una accion y no comprueban los estados intermedios del sistema al realizar dicha accion.
A veces, se confunden las pruebas de integracion con las funcionales, ya que ambas requieren que varios componentes interactuen entre si. La diferencia es que una prueba de integracion puede simplemente verificar que puedes hace consultas en la base de datos, mientras que una prueba funcional esperaria obtener un valor especifico desde la base de datos, segun dicten los requisitos del producto.

2. No Funcionales:
Se analiza y testea el desempe침o, escalabilidad, estabilidad y todo otro requerimiento no funcional.

3. Caja Blanca:
Se analiza fallas de seguridad, flujo de valores, c칩digo interno y resultados informados por la base de datos.Generalmente realizado por programadores.

4. Caja Negra:
Se realiza desde fuera del codigo, solamente se realiza pruebas de uso  con valores validos e invalidos. Se analizan los resultados que  arroja el software.

5. Regresion:
Se verifican que los cambios hechos anteriormente, por fallas informadas o por modificaciones del software, no hayan afectado funcionalidades preexistentes. Incluye cambios o nuevas caracteristicas y fallas que implementan modificaciones de codigo.

6. Pruebas unitarias:
Las pruebas unitarias son de mu bajo nivel y se realizan cerca de la fuente de la aplicacion. Consisten en probar metodos y funciones individuales de las clases, componentes o modulos que usa tu software. En general, las pruebas unitarias son bastante baratas de automatizar y se pueden ejecutar rapidamente mediante un servidor de integracion continua.

7. Pruebas de integracion:
Las pruebas de integracion verifican que los distintos modulos o servicios utilizados por tu aplicacion funcionan bien en conjunto. Por ejemplo, se puede probar la interaccion con la base de datos o asegurarse de que los microservicios funcionan bien en conjunto y segun lo esperado. Estos tipos de pruebas sonmas costosos de ejecutar, ya que requieren que varias partes de la aplicacion esten en marcha.

8. Pruebas integrales:
Las pruebas integrales replican el comportamiento de un usuario con el software en un entorno de aplicacion completo. Ademas, verifican que diversos flujos de usuario funcionen segun lo previsto, y pueden ser tan sencillos como cargar una pagina web o iniciar sesion, o muchos mas complejos, como la verificacion de notificaciones de correo electronico, pago en linea, etc...
Las pruebas integrales son muy utiles, pero son costosas de llevar a cabo y pueden resultar dificiles de mantener cuando estan automatizadas. Se recomienda tener algunas pruebas integrales clave y depender mas de pruebas de menor nivel (unitarias y de integracion) para poder detectar rapidamente nuevos cambios.

9. Pruebas de aceptacion:
Las pruebas de aceptacion son pruebas formales que verifican si un sistema satisface los requisitos empresariales. Requieren que se este ejecutando toda la aplicacion durante las pruebas y se centran en replicar las conductas de los usuarios. Sin embargo, tambien pueden ir mas alla y medir el rendimiento del sistema y rechazar cambios si no se han cumplido determinados objetivos.

10. Pruebas de rendimiento:
Las pruebas de rendimiento evaluan el rendimiento de un sistema con una carga de trabajo determinada. Ayudan a medir la fiabilidad, la velocidad, la escalabilidad y la capacidad de respuesta de una aplicacion. Por ejemplo, una prueba de rendimiento puede analizar los tiempos de respuesta al ejecutar un gran numero de solicitudes, o como se comporta el sistema con una cantidad significativa de datos. Puede determinar si una aplicacion cumple con los requisitos de rendimiento, localizar cuellos de botella, medir la estabilidad durante los picos de trafico y mucho mas.

11. Pruebas de humo:
Las pruebas de humo son pruebas basicas que sirven para comprobar el funcionamiento basico de la aplicacion. Estan cocebidas para ejecutarse rapidamente, y su objetivo es ofrecerte la seguridad de que las principales funciones de tu sistema funcionan segun lo previsto.
Las pruebas de humo pueden resultar utiles justo despues de una implementacion para asegurarse de que la aplicacion funciona correctamente en el entorno que se acaba de implementar.

##Practica

Busqueda de errores
https://academybugs.com

Crear mis casos de pruebas

## Clase 5 Base de Datos, performance y stress con automatizacion
### Ver video







